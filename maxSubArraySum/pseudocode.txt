

#Pseudocode for Algorithm 1:

FUNCTION max_sub_array(array):
    global_max <- float('-inf')
        sub_array <- []
        n <- len(array)
        maximum <- 0
        subarray <- 0
        for i in range(0, n):
            for j in range(i, n + 1):
                current_sum <- 0
                curarray <- []
                for k in range(i, j):
                    current_sum += array[k]
                    curarray <- curarray + [array[k]]
                    IF current_sum > maximum:
                        maximum <- current_sum
                        subarray <- curarray
    RETURN maximum, subarray



#Pseudocode for Algorithm 2:

FUNCTION max_sub_array_better(array):

    global_max <- float('-inf')
    sub_array <- []
    for i in range(len(array) + 1):
        for j in range(len(array) + 1):
            iter_max <- sum(array[i:j])
            IF iter_max > global_max:
                global_max <- iter_max
                sub_array <- array[i:j]
    RETURN global_max, sub_array, timedIF


#Pseudocode for Algorithm 3:

FUNCTION maxSubArraySum(a, size):
    max_so_far <- -maxsize - 1
    max_ending_here <- 0
    start <- 0
    end <- 0
    s <- 0

    for i in range(0, size):
        max_ending_here += a[i]
        IF max_so_far < max_ending_here:
            max_so_far <- max_ending_here
            start <- s
            end <- i
        IF max_ending_here < 0:
            max_ending_here <- 0
            s <- i + 1

    IF max_so_far < 0:
        max_so_far <- 0
    RETURN max_so_far, timedIF